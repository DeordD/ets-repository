<?xml version="1.0" encoding="utf-8"?>
<ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EIDeab289c0-47c0-4b4f-bd11-1f49ecd21878" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 https://resources.etf-validator.net/schema/v2/val/ignoreRef.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/inspire-eu-validation/ets-repository/tree/master/data-bu/bu-as</remoteResource>
	<localPath>/auto</localPath>
	<label>Conformance class: Application schema, Buildings</label>
	<description><![CDATA[This test suite examines requirements associated with the application schema.<br/><br/>
<b>This is a draft version. It has limitations and is expected to contain errors.</b> Please report any issues or problems <a href="https://github.com/inspire-eu-validation/community/wiki/Your-feedback" target="_blank">in GitHub</a>.<br/><br/>
Known limitations are documented in the description of the applicable test case or test assertion. There is a general limitation in all assertions that extensions in additional application schemas are only supported, if the unqualified name of the feature type in the extension is the same as the name of the feature type in the INSPIRE application schema.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as" target="_blank">Conformance Class 'Application Schema, Buildings'</a><br/><br/>
Pre-requisite conformance classes:
<ul><li><a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-gml" target="_blank">Conformance Class 'GML application schemas, Buildings'</a></li></ul>]]></description>
	<reference>../../inspire-noggeo-bsxets.xq</reference>
	<version>0.1.0</version>
	<author>Consortium Bilbomatica, Guadaltel y Geograma</author>
	<creationDate>2020-09-30T14:45:00Z</creationDate>
	<lastEditor>Consortium Bilbomatica, Guadaltel y Geograma</lastEditor>
	<lastUpdateDate>2020-09-30T14:45:00Z</lastUpdateDate>
	<tags>
		<tag ref="EIDae91aeb9-5fd2-43b6-a678-11c17f5ad63c"/>
	</tags>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID70a263c0-0ad7-42f2-9d4d-0d8a4ca71b52"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<dependencies>
		<executableTestSuite ref="EID4f7e4a81-3bab-4058-b528-afec8d6e980d"/>
	</dependencies>
	<testModules>
		<TestModule id="EIDf447f3c8-b290-49dd-885e-6990faec8756">
			<label>IGNORE</label>
			<description>IGNORE</description>
			<parent ref="EIDeab289c0-47c0-4b4f-bd11-1f49ecd21878"/>
			<testCases>
				<TestCase id="EID3dfdcaeb-c000-4123-8414-cded45c40e35">
					<label>Code lists</label>
					<description>Verify that code lists extensions can be accessed.</description>
					<parent ref="EIDf447f3c8-b290-49dd-885e-6990faec8756"/>
					<testSteps>
						<TestStep id="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID3dfdcaeb-c000-4123-8414-cded45c40e35"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID0f127eaf-434e-49e2-995e-e4a445cb00ae">
									<label>bu-as.a.1: conditionOfConstruction</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#conditionOfConstruction'> conditionOfConstruction</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue1'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ConditionOfConstructionValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ConditionOfConstructionValue/ConditionOfConstructionValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'conditionOfConstructionValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/bu-base:conditionOfConstruction

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features
		let $envDom := $feature/bu-base:conditionOfConstruction

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID6f6fcaaf-fc01-44ba-9cd5-a8dc181d0bd3">
									<label>bu-as.a.2: elevationReference</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#elevationReference'> elevationReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'elevationReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:elevation/bu-base:Elevation
		let $envDom := $feature/bu-base:elevationReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:elevation/bu-base:Elevation
		let $envDom := $feature/bu-base:elevationReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID3061f57e-597f-4355-9d38-d26d2a1a5059">
									<label>bu-as.a.3: heightReference</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#heightReference'> heightReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'heightReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:heightReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:heightReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID6669fb84-ad95-41cf-b2d6-06aaae1f1c52">
									<label>bu-as.a.4: lowReference</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#lowReference'> lowReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'lowReferenceValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:lowReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:lowReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID19e39782-c446-4414-8494-a6f8287bbeb9">
									<label>bu-as.a.5: verticalGeometryReference</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference'> verticalGeometryReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReferenceValue'
let $features_selected1 := $features[self::bu-core2d:Building]
let $features_selected2 := $features[self::bu-core2d:BuildingPart]
let $features_selected3 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages1 := 

	for $feature in $features_selected1/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()



let $messages2 := 

	for $feature in $features_selected2/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages2_parts := 
	let $this_features :=
		for $this_feature in $features_selected1
			return
				if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages3 := 

	for $feature in $features_selected3/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3_parts := 
	let $this_features :=
		for $this_feature in $features_selected3
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:verticalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages1, $messages2, $messages2_parts, $messages3, $messages3_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDe74a6dc9-45c7-4358-968e-b936af0b882e">
									<label>bu-as.a.6: verticalGeometryReference3DBottom</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference3DBottom'>verticalGeometryReference3DBottom</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReference3DBottomValue'
let $features_selected := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages3DLoD1 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD1_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD2 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD2_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD3 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD3/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD3_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD3/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD4 := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD4/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3DLoD4_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD4/bu-core3d:BuildingGeometry3DLoD
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DBottom 

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages3DLoD1, $messages3DLoD1_parts, $messages3DLoD2, $messages3DLoD2_parts, $messages3DLoD3, $messages3DLoD3_parts, $messages3DLoD4, $messages3DLoD4_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDac0449ab-cdf2-4244-9a2f-1a83c6f1d4e3">
									<label>bu-as.a.7: verticalGeometryReference3DTop</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#verticalGeometryReference3DTop'>verticalGeometryReference3DTop</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/ElevationReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/ElevationReferenceValue/ElevationReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'verticalGeometryReference3DTopValue'
let $features_selected := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DTop

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:verticalGeometryReference3DTop

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDeb9cf787-7fbb-4629-80ff-e189496c0646">
									<label>bu-as.a.8: status</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#status'>status</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue3'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/HeightStatusValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/HeightStatusValue/HeightStatusValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'statusValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:status

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:heightAboveGround/bu-base:HeightAboveGround
		let $envDom := $feature/bu-base:status

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID1599d047-e953-476f-a8a3-655cc58c8392">
									<label>bu-as.a.9: horizontalGeometryReference</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following checks are performed for every feature in the dataset, for the not extensible codelists:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#horizontalGeometryReference'> horizontalGeometryReference</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#validValue2'>valid value</a>. If the check fails report disallowedCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/HorizontalGeometryReferenceValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/HorizontalGeometryReferenceValue/HorizontalGeometryReferenceValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'horizontalGeometryReferenceValue'
let $features_selected1 := $features[self::bu-core2d:Building]
let $features_selected2 := $features[self::bu-core2d:BuildingPart]
let $features_selected3 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]
let $features_selected4 := $features[self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages1 := 

	for $feature in $features_selected1/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()



let $messages2 := 

	for $feature in $features_selected2/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages2_parts := 
	let $this_features :=
		for $this_feature in $features_selected1
			return
				if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-core2d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages3 := 

	for $feature in $features_selected3/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages3_parts := 
	let $this_features :=
		for $this_feature in $features_selected3
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry2D/bu-base:BuildingGeometry2D
		let $envDom := $feature/bu-base:horizontalGeometryReference

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD1 := 

	for $feature in $features_selected4/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD1_parts := 
	let $this_features :=
		for $this_feature in $features_selected4
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD1/bu-core3d:BuildingGeometry3DLoD1
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $messages4_3DLoD2 := 

	for $feature in $features_selected4/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages4_3DLoD2_parts := 
	let $this_features :=
		for $this_feature in $features_selected4
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else ()

	for $feature in $this_features/bu-core3d:geometry3DLoD2/bu-core3d:BuildingGeometry3DLoD2
		let $envDom := $feature/bu-core3d:horizontalGeometryReference

		return
			if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': '0 or 1', 'count': count($envDom)})
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.disallowedCodeListValueBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()

let $combined_messages := ($messages1, $messages2, $messages2_parts, $messages3, $messages3_parts, $messages4_3DLoD1, $messages4_3DLoD1_parts, $messages4_3DLoD2, $messages4_3DLoD2_parts)

return
(if ($combined_messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.disallowedCodeListValueBuildings"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDbdbe9164-beb8-4676-aa34-4c6b7f1d0550">
									<label>bu-as.a.10: buildingNature</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following check is performed for every feature in the dataset, for the 'open' codelist:
<ul><li>Check that all the <a href = 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#buildingNature'> buildingNature</a> elements has a xlink:href attribute pointing to a <a href='http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#preDefinedValue'>pre-defined value</a>. If the check fails a manual check will be required asking to review the code list definition in order to verify that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule. If the check fails report reviewCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/BuildingNatureValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/BuildingNatureValue/BuildingNatureValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/@id
let $property_string := 'BuildingNatureValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected
		let $envDom := $feature/bu-base:buildingNature

		return
			if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features
		let $envDom := $feature/bu-base:buildingNature

		return
			if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'codelist': $codelist})
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages) then 'PASSED_MANUAL' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($combined_messages//etf:argument[@token='id']/text()))),
$combined_messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
								<TestAssertion id="EIDb8f0d421-1871-4c2d-9101-d2575da836ad">
									<label>bu-as.a.11: currentUse</label>
									<description><![CDATA[When an attribute has a code list as its type, verify that the values comply with the definitions and include the values set out in Annex II, III and IV of the Implementing Rule. To pass this test verify that any instance of an attribute:
<ul>
<li>takes only values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'none'.</li>
<li>takes only a value explicitly specified in the INSPIRE code list register or shall take a value that is narrower (i.e. more specific) than those explicitly specified in the application schema when the code list‘s extensibility is 'narrower'.</li>
<li>takes values explicitly specified in the INSPIRE code list register when the code list‘s extensibility is 'open' or if a value is not one of the values listed in the code list register check that any extensions do not overlap with the code lists that are defined in Annexes II, III and IV of the Implementing Rule and that all extensions conform to the requirements (This last check is a manual test).</li>
</ul>
<br/><br/>The following check is performed for every feature in the dataset, for the 'narrower' codelist:
<ul><li>Check that all the <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#currentUse'>currentUse</a> elements has a xlink:href attribute pointing to a <a href= 'http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values#predefinedValue1'>pre-defined value</a>. If the check fails a manual check will be required asking to review the codelist definition in order to verify that any extensions do not overlap with the codelists that are defined in Annexes II, III and IV of the Implementing Rule. In particular, for the 'narrower' codelists the extended values shall refer to a parent value defined by the Implementing Rule. If the check fails report reviewCodeListValue.</li></ul><br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/code-list-values" target="_blank">Abstract Test Case 'Code list values'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.3</a>]]></description>
									<parent ref="EID8080cf98-fe7d-49cf-80fa-d8ba506f2d38"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>
let $codelist := 'http://inspire.ec.europa.eu/codelist/CurrentUseValue'
let $codelisturl := 'https://inspire.ec.europa.eu/codelist/CurrentUseValue/CurrentUseValue.en.xml'
let $valid_href := fn:doc($codelisturl)/*:codelist/*:containeditems/*:value/*:parents/*:parent/@id
let $property_string := 'CurrentUseValue'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

	for $feature in $features_selected/bu-base:currentUse/bu-base:CurrentUse
		let $envDom := $feature/bu-base:currentUse

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../..), 'featureType':local-name($feature/../..), 'gmlid': string($feature/../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($feature/bu-base:currentUse/@xlink:href = $envDom/@xlink:href)}) 
			else ()


let $messages_parts := 
	let $this_features :=
		for $this_feature in $features_selected
			return
				if (name($this_feature) = 'bu-core3d:Building') then
					$this_feature/bu-base:parts/bu-core3d:BuildingPart
				else if (name($this_feature) = 'bu-core2d:Building') then
					$this_feature/bu-base:parts/bu-core2d:BuildingPart
				else ()

	for $feature in $this_features/bu-base:currentUse/bu-base:CurrentUse
		let $envDom := $feature/bu-base:currentUse

		return
			if (not(exists($envDom))) then
				local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string})
			else if (count($envDom) > 1) then
				local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})
			else if (exists($envDom) and not(count($envDom) = count($envDom/@xlink:href))) then
				local:addMessage('TR.missingAttributeBuildings',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'attribute': 'xlink:href'})	
			else if (exists($envDom) and exists($envDom/@xlink:href) and not($envDom/@xlink:href = $valid_href)) then
				local:addMessage('TR.manual.reviewCodeListValue',  map {'filename': local:filename($feature/../../../..), 'featureType':local-name($feature/../../../..), 'gmlid': string($feature/../../../../@*:id), 'property': $property_string, 'value': string($envDom/@xlink:href), 'count': count($feature/bu-base:currentUse/@xlink:href = $envDom/@xlink:href)}) 
			else ()


let $combined_messages := ($messages, $messages_parts)

return
(if ($combined_messages and not($combined_messages/@ref = ('TR.manual.reviewCodeListValue'))) then 'FAILED' 
else if($combined_messages/@ref = ('TR.manual.reviewCodeListValue') and not($combined_messages/@ref != ('TR.manual.reviewCodeListValue'))) then 'PASSED_MANUAL' 
else if($combined_messages and $combined_messages/@ref != ('TR.manual.reviewCodeListValue')) then 'FAILED' 
else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)
									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.missingAttributeBuildings"/>
										<translationTemplate ref="TR.manual.reviewCodeListValue"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID00a91630-3c55-4cb3-bc16-e6ace636ede7">
					<label>Constraints</label>
					<description>Verify that the features provided in the dataset adhere to the constraints specified in the INSPIRE application schema.</description>
					<parent ref="EIDf447f3c8-b290-49dd-885e-6990faec8756"/>
					<testSteps>
						<TestStep id="EID47689cc7-ee94-4af8-8bb6-f68c94e81398">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID00a91630-3c55-4cb3-bc16-e6ace636ede7"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID4932fab3-6d6d-4142-8b81-4520291eabe9">
									<label>bu-as.b.1: percentageSum</label>
									<description><![CDATA[Check that the total of all percentages (percentage element of the CurrentUse data type) are less or equal to 100. (OCL: "inv: self.percentage.sum()<=100")<br/><br/>Verify that the OCL constraints that are specified in the UML model of the application schema are met, i.e. validate features against the constraints. For unmet constraints report constraintViolation.<br/><br/>
Source: <a href="http://inspire.ec.europa.eu/id/ats/data-bu/master/bu-as/constraints" target="_blank">Abstract Test Case 'Constraints'</a>, <a href="http://inspire.ec.europa.eu/documents/Data_Specifications/INSPIRE_DataSpecification_BU_v3.0.pdf">INSPIRE Data Specification on Buildings, A.1.7</a>]]></description>
									<parent ref="EID47689cc7-ee94-4af8-8bb6-f68c94e81398"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>

let $property_string := 'percentageSum'
let $features_selected := $features[self::bu-core2d:Building | self::bu-core2d:BuildingPart | self::bu-core3d:Building | self::bu-core3d:BuildingPart]

let $messages := 

		for $feature in $features_selected
			let $multiplicity_messages:= 
				for $this_feature in $feature/*/bu-base:CurrentUse

					let $envDom := $this_feature/bu-base:percentage

					return
						if (not(exists($envDom))) then
							local:addMessage('TR.missingElementBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string})
						else if (count($envDom) > 1) then
							local:addMessage('TR.wrongMultiplicityBuildings',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'multiplicity': 1, 'count': count($envDom)})	
						else()
			let $percentage_messages:=
				let $percentages := for $this_feature in $feature/*/bu-base:CurrentUse
						return $this_feature/bu-base:percentage
				return if (sum($percentages) > 100) then
						local:addMessage('TR.constraintViolation',  map {'filename': local:filename($feature), 'featureType':local-name($feature), 'gmlid': string($feature/@*:id), 'property': $property_string, 'constraint': 'the total of all percentages are less or equal to 100.', 'additionalInfo': ''})
					else()
			return if ($multiplicity_messages) then
			 		$multiplicity_messages
			 	else if ($percentage_messages) then
			 		$percentage_messages
			 	else()

return
(if ($messages) then 'FAILED' else 'PASSED',
local:error-statistics('TR.recordsWithErrors', count(fn:distinct-values($messages//etf:argument[@token='id']/text()))),
$messages)

									</expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<translationTemplates>
										<translationTemplate ref="TR.missingElementBuildings"/>
										<translationTemplate ref="TR.wrongMultiplicityBuildings"/>
										<translationTemplate ref="TR.constraintViolation"/>
									</translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</ExecutableTestSuite>